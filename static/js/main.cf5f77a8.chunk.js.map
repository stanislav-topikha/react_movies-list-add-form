{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","onAdd","defaultMovie","useState","setMovie","validations","setValidation","handeInputChange","name","value","required","prev","handleValidation","event","target","urlRegExp","RegExp","test","onSubmit","preventDefault","handeFormSubmit","type","classNames","onChange","onBlur","disabled","Object","values","every","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"8vEAKaA,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,YAAaC,EADoB,EACpBA,OAAQC,EADY,EACZA,QADY,OAGxC,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKH,EACLI,IAAI,kBAIV,sBAAKF,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJC,IAAI,aAIV,qBAAKF,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BJ,SAI/B,sBAAKI,UAAU,UAAf,UACGH,EACD,uBACA,mBAAGM,KAAMJ,EAAT,0BA9BkC,ECI7BK,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKL,UAAU,SAAf,SACGK,EAAOC,KAAI,SAAAC,GAAK,OACf,cAAC,EAAD,eAAkCA,GAAlBA,EAAMC,OADP,KAFsB,E,uBCA9BC,G,MAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpCC,EAAsB,CAC1Bf,MAAO,GACPC,YAAa,GACbC,OAAQ,GACRC,QAAS,GACTS,OAAQ,IAEV,EAA0BI,mBAASD,GAAnC,mBAAOJ,EAAP,KAAcM,EAAd,KACA,EAAqCD,mBAAS,CAC5ChB,OAAO,EACPE,QAAQ,EACRC,SAAS,EACTS,QAAQ,IAJV,mBAAOM,EAAP,KAAoBC,EAApB,KAOMC,EAAmB,SAACC,EAAcC,EAAeC,GACrDN,GAAS,SAAAO,GAAI,kCAAUA,GAAV,kBAAiBH,EAAOC,GAAxB,IAETC,GACFJ,GAAc,SAAAK,GAAI,kCAAUA,GAAV,kBAAiBH,GAAO,GAAxB,GAErB,EAEKI,EAAmB,SACvBC,GAEA,MAAkCA,EAAMC,OAAhCL,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUF,EAAzB,EAAyBA,KAEzB,GAAKC,IAASC,EAAd,CAOA,IAAMK,EAAY,IAAIC,OAAO,sKAEf,WAATR,GAA8B,YAATA,GAAwBO,EAAUE,KAAKR,IAC/DH,GAAc,SAAAK,GAAI,kCAAUA,GAAV,kBAAiBH,GAAO,GAAxB,GANnB,MAHCF,GAAc,SAAAK,GAAI,kCAAUA,GAAV,kBAAiBH,GAAO,GAAxB,GAWrB,EAQD,OACE,uBACEjB,UAAU,WACV2B,SAAU,SAAAL,GAAK,OATK,SAACA,GACvBA,EAAMM,iBACNlB,EAAMH,GACNM,EAASF,EACV,CAKsBkB,CAAgBP,EAApB,EAFjB,UAIE,wBAAOtB,UAAU,kBAAjB,kBAGE,uBACEiB,KAAK,QACLC,MAAOX,EAAMX,MACbkC,KAAK,OACL9B,UAAW+B,IACT,QACA,CACE,aAAcjB,EAAYlB,QAG9B,UAAQ,aACRoC,SACE,oBAAGT,OAAUN,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,SAA1B,OACEH,EAAiBC,EAAMC,EAAOC,EADhC,EAGFc,OAAQ,SAAAX,GAAK,OAAID,EAAiBC,EAArB,EACbH,UAAQ,KAGPL,EAAYlB,OACb,sBAAMI,UAAU,kCAAhB,gDAMJ,wBAAOA,UAAU,kBAAjB,wBAGE,0BACEiB,KAAK,cACLC,MAAOX,EAAMV,YACbG,UAAW+B,IAAW,YACtB,UAAQ,mBACRC,SACE,oBAAGT,OAAUN,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,SAA1B,OACEH,EAAiBC,EAAMC,EAAOC,EADhC,OAMN,wBAAOnB,UAAU,kBAAjB,sBAGE,uBACEiB,KAAK,SACLC,MAAOX,EAAMT,OACbgC,KAAK,OACL9B,UAAW+B,IACT,QACA,CACE,aAAcjB,EAAYhB,SAG9B,UAAQ,cACRkC,SACE,oBAAGT,OAAUN,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,SAA1B,OACEH,EAAiBC,EAAMC,EAAOC,EADhC,EAGFc,OAAQ,SAAAX,GAAK,OAAID,EAAiBC,EAArB,EACbH,UAAQ,KAEPL,EAAYhB,QACb,sBAAME,UAAU,kCAAhB,oDAMJ,wBAAOA,UAAU,kBAAjB,qBAGE,uBACEiB,KAAK,UACLC,MAAOX,EAAMR,QACb+B,KAAK,OACL9B,UAAW+B,IACT,QACA,CACE,aAAcjB,EAAYf,UAG9B,UAAQ,eACRiC,SACE,oBAAGT,OAAUN,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,SAA1B,OACEH,EAAiBC,EAAMC,EAAOC,EADhC,EAGFc,OAAQ,SAAAX,GAAK,OAAID,EAAiBC,EAArB,EACbH,UAAQ,KAGPL,EAAYf,SACb,sBAAMC,UAAU,kCAAhB,mDAMJ,wBAAOA,UAAU,kBAAjB,oBAGE,uBACEiB,KAAK,SACLC,MAAOX,EAAMC,OACbsB,KAAK,OACL9B,UAAW+B,IACT,QACA,CACE,aAAcjB,EAAYN,SAG9B,UAAQ,cACRwB,SACE,oBAAGT,OAAUN,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,SAA1B,OACEH,EAAiBC,EAAMC,EAAOC,EADhC,EAGFc,OAAQ,SAAAX,GAAK,OAAID,EAAiBC,EAArB,EACbH,UAAQ,KAGPL,EAAYlB,OACb,sBAAMI,UAAU,kCAAhB,kDAMJ,wBACE8B,KAAK,SACL,UAAQ,qBACR9B,UAAU,oBACVkC,UAAWC,OAAOC,OAAOtB,GAAauB,OAAM,SAAAnB,GAAK,OAAIA,CAAJ,IAJnD,yBAUL,G,QCjMYoB,G,MAAgB,WAC3B,MAA4B1B,mBAAkB2B,GAA9C,mBAAOlC,EAAP,KAAemC,EAAf,KAMA,OACE,sBAAKxC,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYK,OAAQA,MAEtB,qBAAKL,UAAU,UAAf,SACE,cAAC,EAAD,CAAUU,MAVC,SAACH,GAChBiC,GAAU,SAAApB,GAAI,4BAAQA,GAAR,CAAcb,GAAd,GACf,QAYF,GCvBDkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.cf5f77a8.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/movie';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const defaultMovie: Movie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n  const [movie, setMovie] = useState(defaultMovie);\n  const [validations, setValidation] = useState({\n    title: true,\n    imgUrl: true,\n    imdbUrl: true,\n    imdbId: true,\n  });\n\n  const handeInputChange = (name: string, value: string, required: boolean) => {\n    setMovie(prev => ({ ...prev, [name]: value }));\n\n    if (required) {\n      setValidation(prev => ({ ...prev, [name]: true }));\n    }\n  };\n\n  const handleValidation = (\n    event: React.FocusEvent<HTMLInputElement, Element>,\n  ) => {\n    const { value, required, name } = event.target;\n\n    if (!value && required) {\n      setValidation(prev => ({ ...prev, [name]: false }));\n\n      return;\n    }\n\n    // eslint-disable-next-line max-len\n    const urlRegExp = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n\n    if ((name === 'imgUrl' || name === 'imdbUrl') && !urlRegExp.test(value)) {\n      setValidation(prev => ({ ...prev, [name]: false }));\n    }\n  };\n\n  const handeFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAdd(movie);\n    setMovie(defaultMovie);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={event => handeFormSubmit(event)}\n    >\n      <label className=\"NewMovie__input\">\n        Title\n\n        <input\n          name=\"title\"\n          value={movie.title}\n          type=\"text\"\n          className={classNames(\n            'input',\n            {\n              'is-danger': !validations.title,\n            },\n          )}\n          data-cy=\"form-title\"\n          onChange={\n            ({ target: { name, value, required } }) => (\n              handeInputChange(name, value, required))\n          }\n          onBlur={event => handleValidation(event)}\n          required\n        />\n\n        { !validations.title && (\n          <span className=\"NewMovie__field-error is-size-7\">\n            Title is not valid ⚠️\n          </span>\n        )}\n      </label>\n\n      <label className=\"NewMovie__input\">\n        Description\n\n        <textarea\n          name=\"description\"\n          value={movie.description}\n          className={classNames('textarea')}\n          data-cy=\"form-description\"\n          onChange={\n            ({ target: { name, value, required } }) => (\n              handeInputChange(name, value, required))\n          }\n        />\n      </label>\n\n      <label className=\"NewMovie__input\">\n        Image URL\n\n        <input\n          name=\"imgUrl\"\n          value={movie.imgUrl}\n          type=\"text\"\n          className={classNames(\n            'input',\n            {\n              'is-danger': !validations.imgUrl,\n            },\n          )}\n          data-cy=\"form-imgUrl\"\n          onChange={\n            ({ target: { name, value, required } }) => (\n              handeInputChange(name, value, required))\n          }\n          onBlur={event => handleValidation(event)}\n          required\n        />\n        { !validations.imgUrl && (\n          <span className=\"NewMovie__field-error is-size-7\">\n            Image URL is not valid ⚠️\n          </span>\n        )}\n      </label>\n\n      <label className=\"NewMovie__input\">\n        IMDb URL\n\n        <input\n          name=\"imdbUrl\"\n          value={movie.imdbUrl}\n          type=\"text\"\n          className={classNames(\n            'input',\n            {\n              'is-danger': !validations.imdbUrl,\n            },\n          )}\n          data-cy=\"form-imdbUrl\"\n          onChange={\n            ({ target: { name, value, required } }) => (\n              handeInputChange(name, value, required))\n          }\n          onBlur={event => handleValidation(event)}\n          required\n        />\n\n        { !validations.imdbUrl && (\n          <span className=\"NewMovie__field-error is-size-7\">\n            IMDb URL is not valid ⚠️\n          </span>\n        )}\n      </label>\n\n      <label className=\"NewMovie__input\">\n        IMDb ID\n\n        <input\n          name=\"imdbId\"\n          value={movie.imdbId}\n          type=\"text\"\n          className={classNames(\n            'input',\n            {\n              'is-danger': !validations.imdbId,\n            },\n          )}\n          data-cy=\"form-imdbId\"\n          onChange={\n            ({ target: { name, value, required } }) => (\n              handeInputChange(name, value, required))\n          }\n          onBlur={event => handleValidation(event)}\n          required\n        />\n\n        { !validations.title && (\n          <span className=\"NewMovie__field-error is-size-7\">\n            IMDb ID is not valid ⚠️\n          </span>\n        )}\n      </label>\n\n      <button\n        type=\"submit\"\n        data-cy=\"form-submit-button\"\n        className=\"button is-success\"\n        disabled={!Object.values(validations).every(value => value)}\n      >\n        Add movie\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/movie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies(prev => [...prev, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}